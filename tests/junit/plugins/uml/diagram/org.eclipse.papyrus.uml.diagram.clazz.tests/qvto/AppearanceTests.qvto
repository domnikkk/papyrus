import TestModelCreationUtilities;

modeltype UML uses uml('http://www.eclipse.org/uml2/5.0.0/UML');
modeltype Ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');

library AppearenceTests;

helper Model::appearanceTest(modelName : String) : Package{
	var toReturn := object Package{
		name := modelName + ".appearance";
	};	
	toReturn.applyProfile(utp);
	var testClass := self.createAppearanceTestCaseClass();
	toReturn.packagedElement := testClass;
	testClass.applyStereotype(testClass.getApplicableStereotype("utp::TestContext"));
	testClass.ownedAttribute.applyStereotype(testClass.ownedAttribute->collectOne(getApplicableStereotype("utp::SUT")));
	testClass.ownedOperation.applyStereotype(testClass.ownedOperation->collectOne(getApplicableStereotype("utp::TestCase")));
	return toReturn;
}

helper Model::createAppearanceTestCaseClass() : Class{
	//var testBehaviors : Set(Activity) := elementTypesAppearanceTest->collect(elementType : String | self.getInstanceSpecification(elementType).createCallTestNodeOperationActivity("TestTopNode")->asSet())->asSet();
		var nodeEditPartIs := self.packagedElement[InstanceSpecification]
				->select(is | is.classifier->collectOne(name = "GenTopLevelNode") and elementTypesAppearanceTest->exists(s | s = is.getSlotStringValue("editPartClassName")));
	var editPartsToTest := if nodeEditPartIs.classifier->exists(name = "GenTopLevelNode") then nodeEditPartIs.createEditPartNodesIs2Property("GenTopLevelNode") else nodeEditPartIs.createEditPartNodesIs2Property("GenChildNode") endif;
	var testBehaviors := nodeEditPartIs.createCallTestNodeOperationActivity("AppearanceNodeTest");
	var testCases := nodeEditPartIs->collect(is : InstanceSpecification | is.createEditPartNodesIs2NodeTestCaseOperation("testAppearanceNode", testBehaviors->selectOne(name = is.getSlotStringValue("editPartClassName").toFirstLowerCase() + 'TestCase')));
	
	var testClass := object Class{
		generalization := object Generalization{ general := frameworkBase.getUmlClassifier("AppearanceNodeTest") };
		name := "Test" + self.getDiagramName() + "AppearanceGen";
		ownedAttribute := --self.getInstanceSpecification("GenDiagram").diagramIs2Property()
			editPartsToTest
			->including(self.getInstanceSpecification("GenDiagram").diagramIs2Property())
			->including(self.getInstanceSpecification("GenEditorGenerator").editorGeneratorIs2Property());
		ownedOperation := testCases;
		ownedBehavior := testBehaviors;
		elementImport := self.computeImports(elementTypesAppearanceTest);
		
	};
	return testClass;
}


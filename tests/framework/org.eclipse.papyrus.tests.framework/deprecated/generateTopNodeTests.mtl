<<<<<<< HEAD
[comment encoding = Cp1252 /]
[**
 * The documentation of the module.
 */]
[module generateTopNodeTests('http://www.eclipse.org/gmf/2009/GenModel')/]

[**
 * The documentation of the template.
 * @param aGenEditorGenerator
 */]
[template public generateTopNodeTests(aGenEditorGenerator : GenEditorGenerator)]
	
	[comment @main /]
	[file (testCaseName(aGenEditorGenerator.modelID), false, 'Cp1252')]
/*****************************************************************************
 * Copyright (c) 2009 CEA LIST.
 *
 *    
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * This file has been generated automatically in the Papyrus Test Framework.
 *
 *****************************************************************************/
package org.eclipse.papyrus.diagram.clazz.test.canonical;

import org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest;
import org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequestFactory;
import org.eclipse.papyrus.commands.ICreationCommand;
import org.eclipse.papyrus.diagram.tests.canonical.TestTopNode;
import org.eclipse.papyrus.diagram.clazz.CreateClassDiagramCommand;
import org.eclipse.papyrus.diagram.clazz.providers.UMLElementTypes;
import org.eclipse.uml2.uml.UMLPackage;
import org.junit.Test;


// TODO: Auto-generated Javadoc
/**
 * The Class Test[diagramName(aGenEditorGenerator.modelID)/]TopNode.
 */
public class Test[diagramName(aGenEditorGenerator.modelID)/]TopNode extends TestTopNode {
	
	
	@Override
	protected ICreationCommand getDiagramCommandCreation() {
		return  new Create[diagramName(aGenEditorGenerator.modelID)/]Command();
	}
	
	[for (topNodeElement : GenTopLevelNode | aGenEditorGenerator.diagram.topLevelNodes->select(topLevelNode : GenTopLevelNode | not topLevelNode.modelFacet.containmentMetaFeature.oclIsInvalid()))]
	/**
	 * Test to manage component [genTopLevelNodeName(topNodeElement)/].
	 */
	@Test
	public void testToManage[genTopLevelNodeName(topNodeElement)/]() {
		testToManageNode(UMLElementTypes.getElementType([topNodeElement.editPartClassName/].VISUAL_ID), UMLPackage.eINSTANCE.get[genTopLevelNodeName(topNodeElement)/](), UMLElementTypes.getElementType([containerTypeName(topNodeElement)/].VISUAL_ID, true);
	}
	[/for]
	
	/**
	 * {@inheritDoc}
	 */
	@Override 
	protected CreateViewRequest createViewRequestShapeContainer() {
		return CreateViewRequestFactory.getCreateShapeRequest(UMLElementTypes.Package_2007, getDiagramEditPart().getDiagramPreferencesHint());
	}
	
}
	[/file]
	


[/template]

[query public containerTypeName (topNodeElement : GenTopLevelNode) : OclAny = topNodeElement.modelFacet.containmentMetaFeature.genClass.ecoreClass.name/]


[query public genTopLevelNodeName (topNodeElement : GenTopLevelNode) : String = topNodeElement.modelFacet.metaClass.ecoreClass.name/]
[query public testCaseName (modelID : String) : String = 'Test'.concat(diagramName()).concat('TopNode.java')/]
=======
[comment encoding = Cp1252 /]
[**
 * The documentation of the module.
 */]
[module generateTopNodeTests('http://www.eclipse.org/gmf/2009/GenModel')/]

[**
 * The documentation of the template.
 * @param aGenEditorGenerator
 */]
[template public generateTopNodeTests(aGenEditorGenerator : GenEditorGenerator)]
	
	[comment @main /]
	[file (testCaseName(aGenEditorGenerator.modelID), false, 'Cp1252')]
/*****************************************************************************
 * Copyright (c) 2009 CEA LIST.
 *
 *    
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * This file has been generated automatically in the Papyrus Test Framework.
 *
 *****************************************************************************/
package org.eclipse.papyrus.diagram.clazz.test.canonical;

import org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest;
import org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequestFactory;
import org.eclipse.papyrus.commands.ICreationCommand;
import org.eclipse.papyrus.diagram.tests.canonical.TestTopNode;
import org.eclipse.papyrus.diagram.clazz.CreateClassDiagramCommand;
import org.eclipse.papyrus.diagram.clazz.providers.UMLElementTypes;
import org.eclipse.uml2.uml.UMLPackage;
import org.junit.Test;


// TODO: Auto-generated Javadoc
/**
 * The Class Test[diagramName(aGenEditorGenerator.modelID)/]TopNode.
 */
public class Test[diagramName(aGenEditorGenerator.modelID)/]TopNode extends TestTopNode {
	
	
	@Override
	protected ICreationCommand getDiagramCommandCreation() {
		return  new Create[diagramName(aGenEditorGenerator.modelID)/]Command();
	}
	
	[for (topNodeElement : GenTopLevelNode | aGenEditorGenerator.diagram.topLevelNodes->select(topLevelNode : GenTopLevelNode | not topLevelNode.modelFacet.containmentMetaFeature.oclIsInvalid()))]
	/**
	 * Test to manage component [genTopLevelNodeName(topNodeElement)/].
	 */
	@Test
	public void testToManage[genTopLevelNodeName(topNodeElement)/]() {
		testToManageNode(UMLElementTypes.getElementType([topNodeElement.editPartClassName/].VISUAL_ID), UMLPackage.eINSTANCE.get[genTopLevelNodeName(topNodeElement)/](), UMLElementTypes.getElementType([containerTypeName(topNodeElement)/].VISUAL_ID, true);
	}
	[/for]
	
	/**
	 * {@inheritDoc}
	 */
	@Override 
	protected CreateViewRequest createViewRequestShapeContainer() {
		return CreateViewRequestFactory.getCreateShapeRequest(UMLElementTypes.Package_2007, getDiagramEditPart().getDiagramPreferencesHint());
	}
	
}
	[/file]
	


[/template]

[query public containerTypeName (topNodeElement : GenTopLevelNode) : OclAny = topNodeElement.modelFacet.containmentMetaFeature.genClass.ecoreClass.name/]


[query public genTopLevelNodeName (topNodeElement : GenTopLevelNode) : String = topNodeElement.modelFacet.metaClass.ecoreClass.name/]
[query public testCaseName (modelID : String) : String = 'Test'.concat(diagramName()).concat('TopNode.java')/]
>>>>>>> refs/remotes/origin/master
[query public diagramName (modelID : String) : String = modelID.substitute('PapyrusUML', '')/]

library TestModelCreationUtilities;modeltype UML uses uml('http://www.eclipse.org/uml2/5.0.0/UML');modeltype Ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');//Edit parts to test, to be overriden by the .qvto for each diagram typeproperty topNodesToTest : Set(String);property childNodesToTest : Set(String);property childLabelNodesToTest : Set(String);property linksToTest : Set(String);property linksOwnedBySourceToTest : Set(String);property topContainerEditPart : String;property diagramUpdater : String;property elementTypesAppearanceTest : Set(String);property elementTypesDropTests : Set(String);property elementTypesEditTests : Set(String);property elementTypesDeleteTests : Set(String);property containerInstanceSpecification : InstanceSpecification;//Metamodelsproperty gmfgenMm : Model;property frameworkBase : Model;property utp : Profile;query Model::getDiagramName() : String{	return self.getInstanceSpecification("GenEditorGenerator").getSlotStringValue("modelID").replace("PapyrusUML", "");}query Model::getUmlClassifier(name : String) : Classifier{	var classifiers : Collection(Classifier) := self.packagedElement->selectByKind(Classifier);	return classifiers->any(classifier : Classifier | classifier.name = name);} 	query Model::getInstanceSpecification(classifierName: String) : InstanceSpecification{	return self.packagedElement[InstanceSpecification]->any(classifier->collectOne(name) = classifierName);}query Model::getInstanceSpecificationByName(searchedName: String) : InstanceSpecification{	return self.packagedElement[InstanceSpecification]->any(name = searchedName);}query InstanceSpecification::getSlotStringValue(slotName : String) : String{	return self.getSlot(slotName).value->oclAsType(LiteralString).value->any(true)}query InstanceSpecification::getSlot(slotName : String) : Slot{	return self.slot->select(slot : Slot | slot.definingFeature.name = slotName)->any(true)}helper InstanceSpecification::diagramIs2Property(gmfgenMm : Model) : Property{	var propertyName : String := 'diagram';	return object Property{		name :=  propertyName.toFirstLowerCase(); 		type := gmfgenMm->collectOne(getUmlClassifier(self.name.substringBefore('_')));		defaultValue := object InstanceValue { instance := self; };	}}helper InstanceSpecification::editorGeneratorIs2Property(gmfgenMm : Model) : Property{	var propertyName : String := 'generator';	return object Property{		name :=  propertyName.toFirstLowerCase(); 		type := gmfgenMm->collectOne(getUmlClassifier("GenEditorGenerator"));		defaultValue := object InstanceValue {instance := self } ;	}}helper InstanceSpecification::containerDerivedProperty() : Property{	//var derivedFrom : Property := self.resolveIn(InstanceSpecification::editPartNodesIs2Property, Property)//		if self.name.startsWith("GenTopLevelNode") then//			self.resolveIn(InstanceSpecification::editPartNodesIs2Property, Property)//		else if self.name.startsWith("GenChildNode") then//			self.resolveIn(InstanceSpecification::editPartNodesIs2Property, Property)//		else if self.name.startsWith("GenLink") then//			self.resolveIn(InstanceSpecification::editPartNodesIs2Property, Property)//		else null endif endif endif		//->any(true);	return object Property{		name := "containerEditPart";		isDerived := true;		//redefinedProperty := derivedFrom;		type := redefinedProperty->collectOne(type);		defaultValue := object InstanceValue {instance := self };	}}helper Property::applySutStereotype() : Property{	if self.isDerived = false then		if self.type.name = 'GenTopLevelNode' or 			self.type.name = 'GenChildNode' or 			self.type.name = 'GenLink' or			self.type.name = 'GenLinkOwnedBySource' then 			self.applyStereotype(self.getApplicableStereotype("utp::SUT"))		endif	endif;	return self;}helper Class::createSelfProperty() : Property{	var selfProperty : Property := object Property{		name := "self";		type := self	};	return selfProperty;}helper String::toFirstLowerCase() : String{	return self.at(1).toLower() + self.substring(2, self.size());}helper Model::setMetamodels(myGmfgenMm : Model, myFrameworkBase : Model, myUtp : Profile){	gmfgenMm := myGmfgenMm;	frameworkBase := myFrameworkBase;	utp := myUtp;}helper InstanceSpecification::createEditPartNodesIs2Property(nodeType : String) : Property{		var propertyName : String := self.name.substringAfter('_');	return object Property{		name := propertyName.toFirstLowerCase(); 		type := gmfgenMm.getUmlClassifier(self.classifier->any(true).name);		defaultValue := object InstanceValue { instance := self; };	}}helper InstanceSpecification::createEditPartNodesIs2NodeTestCaseOperation(testName : String, testBehavior : Behavior) : Operation	/*	when {		self.classifier->any(true).name = nodeType and		if nodeType = "GenTopLevelNode" then topNodesToTest else 		if nodeType = "GenChildNode" then childNodesToTest 		endif endif			->exists(s : String | self.getSlotStringValue("editPartClassName") = s)	}	*/{	var propertyName : String := self.name.substringAfter('_');	return object Operation{		name :=  testName.toFirstLowerCase() + propertyName; 		ownedParameter := object Parameter{defaultValue := object InstanceValue{instance := self}};		method := testBehavior;	}}helper InstanceSpecification::createCallTestNodeOperationActivity(abstractTestClassName : String, nodeType : String) : Activity	/*	when {		if abstractTestClassName = "TestTopNode" then 			topNodesToTest 		else 		if abstractTestClassName = "TestChildNode" then childNodesToTest 		endif endif 			->exists(s : String | self.getSlotStringValue("editPartClassName") = s)	}	*/{	var activityArguments := Set{		object ValuePin{			value := object InstanceValue{				instance := self;				name := self.name;				};				name := "node"			}		};		if (nodeType = "TestChildNode" or nodeType = "TestChildLabelNode"){			activityArguments := activityArguments->including(object ValuePin{						value := object InstanceValue{							instance := containerInstanceSpecification;							name := containerInstanceSpecification.getSlotStringValue("editPartClassName");						};						name := "container"					})		};						var testCaseActivity := object Activity{		name :=  self.getSlotStringValue("editPartClassName").toFirstLowerCase() + 'TestCase'; 		ownedNode := object CallOperationAction{			operation := frameworkBase.getUmlClassifier(abstractTestClassName)[Class]->collectOne(getAllOperations()->any(true)); 			argument := activityArguments;		}	};	return testCaseActivity;}helper InstanceSpecification::diagramIs2Property() : Property{	var propertyName : String := 'diagram';	return object Property{		name :=  propertyName.toFirstLowerCase(); 		type := gmfgenMm.getUmlClassifier(self.name.substringBefore('_'));		defaultValue := object InstanceValue { instance := self; };	}}helper InstanceSpecification::editorGeneratorIs2Property() : Property{	var propertyName : String := 'generator';	return object Property{		name :=  propertyName.toFirstLowerCase(); 		type := gmfgenMm.getUmlClassifier("GenEditorGenerator");		defaultValue := object InstanceValue {instance := self } ;	}}helper Model::computeImports( classNames : Set(String)) : Set(ElementImport){	return classNames->collect(name | object ElementImport{		alias := name	})->asSet()}helper Model::createDiagramUpdaterProperty() : Property{	return object Property{		name := "diagramUpdater";		defaultValue := object StringExpression{			symbol := diagramUpdater		}	}}